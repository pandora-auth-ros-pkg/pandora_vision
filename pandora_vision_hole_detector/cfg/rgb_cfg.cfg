#!/usr/bin/env python
# Kinect configuration

PACKAGE = 'pandora_vision_hole_detector'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Example : gen.add("int_param", int_t, 0,    "An In.....", 50, 0,  100)
#                    name        type   level  description  def min max

#--------------------------- show the RGB image --------------------------------
gen.add("show_rgb_image", bool_t, 0,"", False)

#------------------------ RGB image representation -----------------------------
gen.add("image_representation_method", int_t, 0,"", 1, 0, 1)

#-------------------------- Edge detection method ------------------------------
dirm = gen.enum([
  gen.const("Canny_edge_detector", int_t, 0,""),
  gen.const("Scharr_edge_detector", int_t, 1,""),
  gen.const("Sobel_edge_detector", int_t, 2,""),
  gen.const("Laplacian_edge_detector", int_t, 3,""),
  gen.const("Mixed_edge_detector", int_t, 4,"")], "")

gen.add("edge_detection_method", int_t, 0, "", 1, 0, 4, edit_method=dirm)

#----------------------------- canny parameters --------------------------------
gen.add("canny_ratio", int_t, 0,"", 3, 0, 10)
gen.add("canny_kernel_size", int_t, 0,"", 3, 1, 10)
gen.add("canny_low_threshold", int_t, 0,"", 10, 1, 255)
gen.add("canny_blur_noise_kernel_size", int_t, 0,"", 3, 1, 10)

gen.add("contrast_enhance_beta", int_t, 0,"", 2, 1, 10)
gen.add("contrast_enhance_alpha", int_t, 0,"", 2, 1, 10)

#-------------------------- Threshold parameters -------------------------------

gen.add("threshold_lower_value", int_t, 0,"", 10, 0, 255)

#--------------------------- Blob detection parameters -------------------------

gen.add("blob_min_threshold", int_t, 0,"", 0, 0, 5000)
gen.add("blob_max_threshold", int_t, 0,"", 200, 0, 5000)
gen.add("blob_threshold_step", int_t, 0,"", 100, 1, 100)
gen.add("blob_min_area", int_t, 0,"", 1000, 1, 1000000)
gen.add("blob_max_area", int_t, 0,"", 300000, 1, 1000000)
gen.add("blob_min_convexity", double_t, 0,"", 0.0, 0.0, 100.0)
gen.add("blob_max_convexity", double_t, 0,"", 100.0, 0.0, 100.0)
gen.add("blob_min_inertia_ratio", double_t, 0,"", 0.0, 0.0, 100.0)
gen.add("blob_max_circularity", double_t, 0,"", 1.0, 0.0, 1.0)
gen.add("blob_min_circularity", double_t, 0,"", 0.3, 0.0, 1.0)
gen.add("blob_filter_by_color", bool_t, 0,"", False)
gen.add("blob_filter_by_circularity", bool_t, 0,"", True)

#------------------------ Bounding boxes parameters ----------------------------

bbdetmeth = gen.enum([
  gen.const("Brushfire_bounding_box_detection", int_t, 0,""),
  gen.const("Raycast_bounding_box_detection", int_t, 1,"")],
   "")

gen.add("bounding_box_detection_method", int_t, 0, "", 1, 0, 1, edit_method=bbdetmeth)
gen.add("raycast_keypoint_partitions", int_t, 0, "", 32, 0, 32)


#------------------------ Loose ends connection parameters ---------------------

gen.add("AB_to_MO_ratio", int_t, 0, "", 4, 0, 10)
gen.add("minimum_curve_points", int_t, 0, "", 50, 0, 1000)


#------------------------ Interpolation  parameters ----------------------------
intermethod = gen.enum([
  gen.const("averaging_pixel_neighbor_values", int_t, 0,""),
  gen.const("brushfire_near", int_t, 1,""),
  gen.const("replace_with_white", int_t, 2,"")
  ],"")

gen.add("interpolation_method", int_t, 0, "", 0, 0, 2, edit_method=intermethod)

gen.add("scale_method", int_t, 0, "", 0, 0, 1)

#-------------------------- Histogram calculation ------------------------------
gen.add("number_of_hue_bins", int_t, 0,"", 30, 0, 179)
gen.add("number_of_saturation_bins", int_t, 0,"", 32, 0, 255)
gen.add("number_of_value_bins", int_t, 0,"", 30, 0, 255)
gen.add("secondary_channel", int_t, 0,"", 2, 1, 2)

#---------------------- RGB image segmentation parameters ----------------------
gen.add("spatial_window_radius", int_t, 0,"", 4, 1, 180)
gen.add("color_window_radius", int_t, 0,"", 40, 1, 180)
gen.add("maximum_level_pyramid_segmentation", int_t, 0,"", 2, 0, 4)

blurmethod = gen.enum([
  gen.const("pyr_mean_shift_filtering", int_t, 0,""),
  gen.const("median_blur", int_t, 1,"")
  ],"")

gen.add("segmentation_blur_method", int_t, 0, "", 0, 0, 1, edit_method=blurmethod)

gen.add("floodfill_lower_colour_difference", int_t, 0,"", 1, 1, 6)
gen.add("floodfill_upper_colour_difference", int_t, 0,"", 2, 1, 6)
gen.add("watershed_foreground_dilation_factor", int_t, 0,"", 3, 1, 20)
gen.add("watershed_foreground_erosion_factor", int_t, 0,"", 5, 1, 20)
gen.add("watershed_background_dilation_factor", int_t, 0,"", 3, 1, 20)
gen.add("watershed_background_erosion_factor", int_t, 0,"", 5, 1, 20)


#-------------------------------- Debug ----------------------------------------

gen.add("debug_show_find_holes", bool_t, 0,"", False)
gen.add("debug_show_find_holes_size", int_t, 0,"", 1200, 0, 3000)

gen.add("debug_show_denoise_edges", bool_t, 0,"", False)
gen.add("debug_show_denoise_edges_size", int_t, 0,"", 1200, 0, 3000)

gen.add("debug_show_connect_pairs", bool_t, 0,"", False)
gen.add("debug_show_connect_pairs_size", int_t, 0,"", 1200, 0, 3000)

gen.add("debug_show_get_shapes_clear_border", bool_t, 0,"", False)
gen.add("debug_show_get_shapes_clear_border_size", int_t, 0,"", 1200, 0, 3000)


exit(gen.generate(PACKAGE, "rgb_node", "rgb_cfg"))
