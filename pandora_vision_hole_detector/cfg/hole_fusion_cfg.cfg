#!/usr/bin/env python
# Kinect configuration

PACKAGE = 'pandora_vision_hole_detector'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Example : gen.add("int_param", int_t, 0,    "An In.....", 50, 0,  100)
#                    name        type   level  description  def min max


#------------------------Kanny parameters----------------------------
gen.add("kanny_ratio", int_t, 0,"", 3, 0, 10)
gen.add("kanny_kernel_size", int_t, 0,"", 3, 1, 10)
gen.add("kanny_low_threshold", int_t, 0,"", 10, 1, 255)
gen.add("kanny_blur_noise_kernel_size", int_t, 0,"", 3, 1, 10)

gen.add("contrast_enhance_beta", int_t, 0,"", 2, 1, 10)
gen.add("contrast_enhance_alpha", int_t, 0,"", 2, 1, 10)

#------------------------Threshold parameters------------------------

gen.add("threshold_lower_value", int_t, 0,"", 10, 0, 255)
gen.add("adaptive_max_value", int_t, 0,"", 255, 0, 255)
gen.add("adaptive_method", int_t, 0,"", 1, 0, 1)
gen.add("adaptive_block_size", int_t, 0,"", 31, 0, 100)
gen.add("adaptive_c_value", int_t, 0,"", 0, 0, 100)

#------------------------Blob detection parameters-------------------

gen.add("blob_min_threshold", int_t, 0,"", 0, 0, 5000)
gen.add("blob_max_threshold", int_t, 0,"", 200, 0, 5000)
gen.add("blob_threshold_step", int_t, 0,"", 100, 1, 100)
gen.add("blob_min_area", int_t, 0,"", 550, 1, 1000000)
gen.add("blob_max_area", int_t, 0,"", 300000, 1, 1000000)
gen.add("blob_min_convexity", double_t, 0,"", 0.0, 0.0, 100.0)
gen.add("blob_max_convexity", double_t, 0,"", 100.0, 0.0, 100.0)
gen.add("blob_min_inertia_ratio", double_t, 0,"", 0.0, 0.0, 100.0)
gen.add("blob_max_circularity", double_t, 0,"", 1.0, 0.0, 1.0)
gen.add("blob_min_circularity", double_t, 0,"", 0.3, 0.0, 1.0)
gen.add("blob_filter_by_color", bool_t, 0,"", False)
gen.add("blob_filter_by_circularity", bool_t, 0,"", True)

#---------------------Bounding boxes parameters----------------------

gen.add("bounding_box_min_area_threshold", int_t, 0,"", 550, 0, 1000)

bbdetmeth = gen.enum([
  gen.const("Brushfire_bounding_box_detection", int_t, 0,""),
  gen.const("Raycast_bounding_box_detection", int_t, 1,"")],
   "")

gen.add("bounding_box_detection_method", int_t, 0, "", 1, 0, 1, edit_method=bbdetmeth)
gen.add("raycast_keypoint_partitions", int_t, 0, "", 32, 0, 32)


#---------------------Loose ends connection parameters---------------

gen.add("AB_to_MO_ratio", int_t, 0, "", 2, 0, 10)
gen.add("minimum_curve_points", int_t, 0, "", 50, 0, 1000)


#---------------------Interpolation  parameters----------------------

intermethod = gen.enum([
  gen.const("averaging_pixel_neighbor_values", int_t, 0,""),
  gen.const("brushfire_near", int_t, 1,""),
  gen.const("replace_with_white", int_t, 2,"")
  ],"")

gen.add("interpolation_method", int_t, 0, "", 0, 0, 2, edit_method=intermethod)

#---------------------Hole checker parameters -----------------------

gen.add("run_checker_depth_diff", int_t, 0,"", 2, 0, 10)
gen.add("run_checker_outline_of_rectangle", int_t, 0,"", 3, 0, 10)
gen.add("run_checker_depth_area", int_t, 0,"", 1, 0, 10)
gen.add("run_checker_brushfire_outline_to_rectangle", int_t, 0,"", 5, 0, 10)
gen.add("run_checker_depth_homogeneity", int_t, 0,"", 4, 0, 10)

gen.add("run_checker_color_homogeneity", int_t, 0,"", 1, 0, 10)
gen.add("run_checker_luminosity_diff", int_t, 0,"", 2, 0, 10)
gen.add("run_checker_texture_diff", int_t, 0,"", 4, 0, 10)
gen.add("run_checker_texture_backproject", int_t, 0,"", 3, 0, 10)


gen.add("rectangle_inflation_size", int_t, 0,"", 5, 0, 100)
gen.add("depth_difference", double_t, 0,"", 0.4, 0.0, 2.0)

#---------------------Plane detection parameters --------------------

segmentationmethod = gen.enum([
  gen.const("SAC", int_t, 0,""),
  gen.const("SAC_normals", int_t, 1,"")
  ],"")

gen.add("segmentation_method", int_t, 0, "", 0, 0, 1, edit_method=segmentationmethod)
gen.add("max_iterations", int_t, 0, "", 1000, 0, 100000)
gen.add("num_points_to_exclude", double_t, 0, "", 0.33, 0.0, 1.0)
gen.add("point_to_plane_distance_threshold", double_t, 0, "", 0.01, 0.0, 0.20)

gen.add("scale_method", int_t, 0, "", 0, 0, 1)

#-------------------------- Debug -----------------------------------

gen.add("debug_show_find_holes", bool_t, 0,"", False)
gen.add("debug_show_find_holes_size", int_t, 0,"", 800, 0, 3000)
gen.add("debug_time_find_holes", bool_t, 0,"", False)

gen.add("debug_show_denoise_edges", bool_t, 0,"", False)
gen.add("debug_show_denoise_edges_size", int_t, 0,"", 1200, 0, 3000)

gen.add("debug_show_connect_pairs", bool_t, 0,"", False)
gen.add("debug_show_connect_pairs_size", int_t, 0,"", 1200, 0, 3000)

gen.add("debug_show_get_shapes_clear_border", bool_t, 0,"", False)
gen.add("debug_show_get_shapes_clear_border_size", int_t, 0,"", 1200, 0, 3000)

gen.add("debug_show_check_holes", bool_t, 0,"", False)
gen.add("debug_show_check_holes_size", int_t, 0,"", 1200, 0, 3000)

gen.add("debug_show_merge_holes", bool_t, 0,"", False)
gen.add("debug_show_merge_holes_size", int_t, 0,"", 1200, 0, 3000)

#-------------------------- Texture parameters ---------------------------------
gen.add("match_texture_threshold", double_t, 0,"", 0.3, 0.0, 1.0)
gen.add("non_zero_points_in_box_blob_histogram", int_t, 0,"", 0, 0, 320)
gen.add("num_bins_threshold", int_t, 0,"", 10, 0, 180)

gen.add("number_of_hue_bins", int_t, 0,"", 30, 0, 179)
gen.add("number_of_saturation_bins", int_t, 0,"", 32, 0, 255)
gen.add("number_of_value_bins", int_t, 0,"", 30, 0, 255)

#------------------------ Holes connection - merger ----------------------------
gen.add("connect_holes_min_distance", double_t, 0,"", 0.05, 0.0, 0.3)
gen.add("connect_holes_max_distance", double_t, 0,"", 0.15, 0.0, 0.5)




exit(gen.generate(PACKAGE, "hole_fusion_node", "hole_fusion_cfg"))
