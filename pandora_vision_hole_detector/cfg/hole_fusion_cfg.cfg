#!/usr/bin/env python
# Kinect configuration

PACKAGE = 'pandora_vision_hole_detector'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Example : gen.add("int_param", int_t, 0,    "An In.....", 50, 0,  100)
#                    name        type   level  description  def min max

#---------------- show the final output of the hole detector package -----------
gen.add("show_final_holes", bool_t, 0,"", False)

#----------- show all valid holes, either from RGB or Depth sources, -----------
#----------------------- or the merges between them ----------------------------
gen.add("show_valid_holes", bool_t, 0,"", False)

#------------------- show respective Depth and RGB holes -----------------------
gen.add("show_respective_holes", bool_t, 0,"", False)

#---------------------------- Threshold parameters -----------------------------
gen.add("denoised_edges_threshold", int_t, 0,"", 10, 0, 255)

#------------------------ Bounding boxes parameters ----------------------------
odm= gen.enum([
  gen.const("Brushfire_bounding_box_detection", int_t, 0,""),
  gen.const("Raycast_bounding_box_detection", int_t, 1,"")],
   "")

gen.add("outline_detection_method", int_t, 0, "", 1, 0, 1, edit_method=odm)
gen.add("raycast_keypoint_partitions", int_t, 0, "", 32, 0, 128)


#-------------------------- Backprojection parameters --------------------------
gen.add("backprojection_threshold", int_t, 0,"", 128, 0, 255)


#------------------------ Watershed-speficic parameters ------------------------
gen.add("watershed_foreground_dilation_factor", int_t, 0,"", 3, 1, 20)
gen.add("watershed_foreground_erosion_factor", int_t, 0,"", 5, 1, 20)
gen.add("watershed_background_dilation_factor", int_t, 0,"", 3, 1, 20)
gen.add("watershed_background_erosion_factor", int_t, 0,"", 5, 1, 20)


#--------------------------- Hole checker parameters ---------------------------

#--------------------------- Depth filters weight order ------------------------
gen.add("run_checker_depth_diff", int_t, 0,"", 8, 0, 9)
gen.add("run_checker_brushfire_outline_to_rectangle", int_t, 0,"", 3, 0, 9)
gen.add("run_checker_depth_homogeneity", int_t, 0,"", 7, 0, 9)
gen.add("run_checker_outline_of_rectangle", int_t, 0,"", 2, 0, 9)
gen.add("run_checker_depth_area", int_t, 0,"", 1, 0, 9)

#---------------------------- RGB filters weight order -------------------------
gen.add("run_checker_texture_diff", int_t, 0,"", 6, 0, 9)
gen.add("run_checker_texture_backproject", int_t, 0,"", 4, 0, 9)
gen.add("run_checker_luminosity_diff", int_t, 0,"", 5, 0, 9)
gen.add("run_checker_color_homogeneity", int_t, 0,"", 0, 0, 9)

#----------------- RGB filters weight order when without depth -----------------
gen.add("run_checker_texture_diff_urgent", int_t, 0,"", 4, 0, 4)
gen.add("run_checker_texture_backproject_urgent", int_t, 0,"", 3, 0, 4)
gen.add("run_checker_luminosity_diff_urgent", int_t, 0,"", 2, 0, 4)
gen.add("run_checker_color_homogeneity_urgent", int_t, 0,"", 1, 0, 4)

#--------------------------- Depth filter thresholds ---------------------------
gen.add("checker_depth_diff_threshold", double_t, 0,"", 0.5, 0.0, 1.0)
gen.add("checker_outline_of_rectangle_threshold", double_t, 0,"", 0.5, 0.0, 1.0)
gen.add("checker_depth_area_threshold", double_t, 0,"", 0.9, 0.0, 1.0)
gen.add("checker_brushfire_outline_to_rectangle_threshold", double_t, 0,"", 0.5, 0.0, 1.0)
gen.add("checker_depth_homogeneity_threshold", double_t, 0,"", 0.07, 0.0, 1.0)

#---------------------------- Rgb filter thresholds ----------------------------
gen.add("checker_color_homogeneity_threshold", double_t, 0,"", 0.2, 0.0, 1.0)
gen.add("checker_luminosity_diff_threshold", double_t, 0,"", 0.4, 0.0, 1.0)
gen.add("checker_texture_diff_threshold", double_t, 0,"", 0.2, 0.0, 1.0)
gen.add("checker_texture_backproject_threshold", double_t, 0,"", 0.7, 0.0, 1.0)

#------------------- Rgb filter thresholds when without depth ------------------
gen.add("checker_color_homogeneity_urgent_threshold", double_t, 0,"", 0.2, 0.0, 1.0)
gen.add("checker_luminosity_diff_urgent_threshold", double_t, 0,"", 0.5, 0.0, 1.0)
gen.add("checker_texture_diff_urgent_threshold", double_t, 0,"", 0.2, 0.0, 1.0)
gen.add("checker_texture_backproject_urgent_threshold", double_t, 0,"", 0.7, 0.0, 1.0)

#--------------------- Inflation size of bounding boxes ------------------------
gen.add("rectangle_inflation_size", int_t, 0,"", 10, 0, 100)

#------------------------------- Validation process-----------------------------
gen.add("validation_process", int_t, 0,"", 2, 0, 2)

#------------------------------- Merger parameters -----------------------------
gen.add("merger_depth_diff_threshold", double_t, 0,"", 0.3, 0.0, 1.0)
gen.add("merger_depth_area_threshold", double_t, 0,"", 1.0, 0.0, 1.0)

#--------------------------- Depth diff parameters -----------------------------
gen.add("depth_difference_probability_assignment_method", int_t, 0,"", 1, 0, 1)
gen.add("holes_gaussian_mean", double_t, 0,"", 0.15, 0.0, 0.6)
gen.add("holes_gaussian_stddev", double_t, 0,"", 0.2, 0.0, 1.0)
gen.add("depth_diff_cutoff_min_depth", double_t, 0,"", 0.02, 0.0, 0.6)
gen.add("depth_diff_cutoff_max_depth", double_t, 0,"", 0.4, 0.0, 0.6)

#------------------------- Plane detection parameters --------------------------
gen.add("filter_leaf_size", double_t, 0, "", 0.01, 0.0, 1.0)
gen.add("max_iterations", int_t, 0, "", 1000, 0, 100000)
gen.add("num_points_to_exclude", double_t, 0, "", 0.33, 0.0, 1.0)
gen.add("point_to_plane_distance_threshold", double_t, 0, "", 0.01, 0.0, 0.20)

gen.add("scale_method", int_t, 0, "", 0, 0, 1)

#------------------------------- Debug -----------------------------------------
gen.add("show_find_holes", bool_t, 0,"", False)
gen.add("show_find_holes_size", int_t, 0,"", 800, 0, 3000)
gen.add("time_find_holes", bool_t, 0,"", False)

gen.add("show_denoise_edges", bool_t, 0,"", False)
gen.add("show_denoise_edges_size", int_t, 0,"", 1200, 0, 3000)

gen.add("show_connect_pairs", bool_t, 0,"", False)
gen.add("show_connect_pairs_size", int_t, 0,"", 1200, 0, 3000)

gen.add("show_get_shapes_clear_border", bool_t, 0,"", False)
gen.add("show_get_shapes_clear_border_size", int_t, 0,"", 1200, 0, 3000)

gen.add("show_check_holes", bool_t, 0,"", False)
gen.add("show_check_holes_size", int_t, 0,"", 1200, 0, 3000)

gen.add("show_merge_holes", bool_t, 0,"", False)
gen.add("show_merge_holes_size", int_t, 0,"", 1200, 0, 3000)

#-------------------------- Texture parameters ---------------------------------
gen.add("match_texture_threshold", double_t, 0,"", 0.8, 0.0, 1.0)
gen.add("non_zero_points_in_box_blob_histogram", int_t, 0,"", 0, 0, 320)
gen.add("num_bins_threshold", int_t, 0,"", 10, 0, 180)

gen.add("number_of_hue_bins", int_t, 0,"", 30, 0, 179)
gen.add("number_of_saturation_bins", int_t, 0,"", 32, 0, 255)
gen.add("number_of_value_bins", int_t, 0,"", 32, 0, 255)
gen.add("secondary_channel", int_t, 0,"", 2, 1, 2)

#------------------------ Holes connection - merger ----------------------------
gen.add("connect_holes_min_distance", double_t, 0,"", 0.05, 0.0, 0.3)
gen.add("connect_holes_max_distance", double_t, 0,"", 0.15, 0.0, 0.5)

#------------------------ Holes Validity Thresholds ----------------------------
gen.add("holes_validity_threshold_normal", double_t, 0,"", 0.48, 0.0, 1.0)
gen.add("holes_validity_threshold_urgent", double_t, 0,"", 0.40, 0.0, 1.0)

exit(gen.generate(PACKAGE, "hole_fusion_node", "hole_fusion_cfg"))
